/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { abortOperation } from '../fn/order-management/abort-operation';
import { AbortOperation$Params } from '../fn/order-management/abort-operation';
import { addOperation } from '../fn/order-management/add-operation';
import { AddOperation$Params } from '../fn/order-management/add-operation';
import { adviceOperation } from '../fn/order-management/advice-operation';
import { AdviceOperation$Params } from '../fn/order-management/advice-operation';
import { beginOperation } from '../fn/order-management/begin-operation';
import { BeginOperation$Params } from '../fn/order-management/begin-operation';
import { getAdviceContext } from '../fn/order-management/get-advice-context';
import { GetAdviceContext$Params } from '../fn/order-management/get-advice-context';
import { getAssignableRecipes } from '../fn/order-management/get-assignable-recipes';
import { GetAssignableRecipes$Params } from '../fn/order-management/get-assignable-recipes';
import { getBeginContext } from '../fn/order-management/get-begin-context';
import { GetBeginContext$Params } from '../fn/order-management/get-begin-context';
import { getDocuments } from '../fn/order-management/get-documents';
import { GetDocuments$Params } from '../fn/order-management/get-documents';
import { getDocumentStream } from '../fn/order-management/get-document-stream';
import { GetDocumentStream$Params } from '../fn/order-management/get-document-stream';
import { getInterruptContext } from '../fn/order-management/get-interrupt-context';
import { GetInterruptContext$Params } from '../fn/order-management/get-interrupt-context';
import { getLogs } from '../fn/order-management/get-logs';
import { GetLogs$Params } from '../fn/order-management/get-logs';
import { getOperation } from '../fn/order-management/get-operation';
import { GetOperation$Params } from '../fn/order-management/get-operation';
import { getOperations } from '../fn/order-management/get-operations';
import { GetOperations$Params } from '../fn/order-management/get-operations';
import { getProductParts } from '../fn/order-management/get-product-parts';
import { GetProductParts$Params } from '../fn/order-management/get-product-parts';
import { getReportContext } from '../fn/order-management/get-report-context';
import { GetReportContext$Params } from '../fn/order-management/get-report-context';
import { interruptOperation } from '../fn/order-management/interrupt-operation';
import { InterruptOperation$Params } from '../fn/order-management/interrupt-operation';
import { AdviceContext as MoryxOrdersAdviceContext } from '../models/Moryx/Orders/advice-context';
import { BeginContext as MoryxOrdersBeginContext } from '../models/Moryx/Orders/begin-context';
import { DocumentModel as MoryxOrdersEndpointsDocumentModel } from '../models/Moryx/Orders/Endpoints/document-model';
import { OperationChangedModel as MoryxOrdersEndpointsModelsOperationChangedModel } from '../models/Moryx/Orders/Endpoints/Models/operation-changed-model';
import { OperationLogMessageModel as MoryxOrdersEndpointsOperationLogMessageModel } from '../models/Moryx/Orders/Endpoints/operation-log-message-model';
import { OperationModel as MoryxOrdersEndpointsOperationModel } from '../models/Moryx/Orders/Endpoints/operation-model';
import { OperationRecipeModel as MoryxOrdersEndpointsOperationRecipeModel } from '../models/Moryx/Orders/Endpoints/operation-recipe-model';
import { ProductPartModel as MoryxOrdersEndpointsProductPartModel } from '../models/Moryx/Orders/Endpoints/product-part-model';
import { ReportContext as MoryxOrdersReportContext } from '../models/Moryx/Orders/report-context';
import { operationStream } from '../fn/order-management/operation-stream';
import { OperationStream$Params } from '../fn/order-management/operation-stream';
import { reload } from '../fn/order-management/reload';
import { Reload$Params } from '../fn/order-management/reload';
import { reportOperation } from '../fn/order-management/report-operation';
import { ReportOperation$Params } from '../fn/order-management/report-operation';
import { setOperationSortOrder } from '../fn/order-management/set-operation-sort-order';
import { SetOperationSortOrder$Params } from '../fn/order-management/set-operation-sort-order';

@Injectable({ providedIn: 'root' })
export class OrderManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getOperations()` */
  static readonly GetOperationsPath = '/api/moryx/orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOperations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOperations$Response(params?: GetOperations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxOrdersEndpointsOperationModel>>> {
    return getOperations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOperations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOperations(params?: GetOperations$Params, context?: HttpContext): Observable<Array<MoryxOrdersEndpointsOperationModel>> {
    return this.getOperations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxOrdersEndpointsOperationModel>>): Array<MoryxOrdersEndpointsOperationModel> => r.body)
    );
  }

  /** Path part for operation `addOperation()` */
  static readonly AddOperationPath = '/api/moryx/orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOperation()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addOperation$Response(params?: AddOperation$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxOrdersEndpointsOperationModel>> {
    return addOperation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOperation$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addOperation(params?: AddOperation$Params, context?: HttpContext): Observable<MoryxOrdersEndpointsOperationModel> {
    return this.addOperation$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxOrdersEndpointsOperationModel>): MoryxOrdersEndpointsOperationModel => r.body)
    );
  }

  /** Path part for operation `operationStream()` */
  static readonly OperationStreamPath = '/api/moryx/orders/stream';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `operationStream()` instead.
   *
   * This method doesn't expect any request body.
   */
  operationStream$Response(params?: OperationStream$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxOrdersEndpointsModelsOperationChangedModel>> {
    return operationStream(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `operationStream$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  operationStream(params?: OperationStream$Params, context?: HttpContext): Observable<MoryxOrdersEndpointsModelsOperationChangedModel> {
    return this.operationStream$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxOrdersEndpointsModelsOperationChangedModel>): MoryxOrdersEndpointsModelsOperationChangedModel => r.body)
    );
  }

  /** Path part for operation `getOperation()` */
  static readonly GetOperationPath = '/api/moryx/orders/{guid}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOperation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOperation$Response(params: GetOperation$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxOrdersEndpointsOperationModel>> {
    return getOperation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOperation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOperation(params: GetOperation$Params, context?: HttpContext): Observable<MoryxOrdersEndpointsOperationModel> {
    return this.getOperation$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxOrdersEndpointsOperationModel>): MoryxOrdersEndpointsOperationModel => r.body)
    );
  }

  /** Path part for operation `getDocuments()` */
  static readonly GetDocumentsPath = '/api/moryx/orders/{guid}/documents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDocuments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDocuments$Response(params: GetDocuments$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxOrdersEndpointsDocumentModel>>> {
    return getDocuments(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDocuments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDocuments(params: GetDocuments$Params, context?: HttpContext): Observable<Array<MoryxOrdersEndpointsDocumentModel>> {
    return this.getDocuments$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxOrdersEndpointsDocumentModel>>): Array<MoryxOrdersEndpointsDocumentModel> => r.body)
    );
  }

  /** Path part for operation `getDocumentStream()` */
  static readonly GetDocumentStreamPath = '/api/moryx/orders/{guid}/document/{identifier}/stream';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDocumentStream()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDocumentStream$Response(params: GetDocumentStream$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getDocumentStream(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDocumentStream$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDocumentStream(params: GetDocumentStream$Params, context?: HttpContext): Observable<Blob> {
    return this.getDocumentStream$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `getProductParts()` */
  static readonly GetProductPartsPath = '/api/moryx/orders/{guid}/productparts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductParts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductParts$Response(params: GetProductParts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxOrdersEndpointsProductPartModel>>> {
    return getProductParts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductParts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductParts(params: GetProductParts$Params, context?: HttpContext): Observable<Array<MoryxOrdersEndpointsProductPartModel>> {
    return this.getProductParts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxOrdersEndpointsProductPartModel>>): Array<MoryxOrdersEndpointsProductPartModel> => r.body)
    );
  }

  /** Path part for operation `getBeginContext()` */
  static readonly GetBeginContextPath = '/api/moryx/orders/{guid}/begin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBeginContext()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeginContext$Response(params: GetBeginContext$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxOrdersBeginContext>> {
    return getBeginContext(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBeginContext$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBeginContext(params: GetBeginContext$Params, context?: HttpContext): Observable<MoryxOrdersBeginContext> {
    return this.getBeginContext$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxOrdersBeginContext>): MoryxOrdersBeginContext => r.body)
    );
  }

  /** Path part for operation `beginOperation()` */
  static readonly BeginOperationPath = '/api/moryx/orders/{guid}/begin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `beginOperation()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  beginOperation$Response(params: BeginOperation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return beginOperation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `beginOperation$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  beginOperation(params: BeginOperation$Params, context?: HttpContext): Observable<void> {
    return this.beginOperation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getReportContext()` */
  static readonly GetReportContextPath = '/api/moryx/orders/{guid}/report';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReportContext()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportContext$Response(params: GetReportContext$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxOrdersReportContext>> {
    return getReportContext(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReportContext$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportContext(params: GetReportContext$Params, context?: HttpContext): Observable<MoryxOrdersReportContext> {
    return this.getReportContext$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxOrdersReportContext>): MoryxOrdersReportContext => r.body)
    );
  }

  /** Path part for operation `reportOperation()` */
  static readonly ReportOperationPath = '/api/moryx/orders/{guid}/report';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `reportOperation()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  reportOperation$Response(params: ReportOperation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return reportOperation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `reportOperation$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  reportOperation(params: ReportOperation$Params, context?: HttpContext): Observable<void> {
    return this.reportOperation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getInterruptContext()` */
  static readonly GetInterruptContextPath = '/api/moryx/orders/{guid}/interrupt';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInterruptContext()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInterruptContext$Response(params: GetInterruptContext$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxOrdersReportContext>> {
    return getInterruptContext(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInterruptContext$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInterruptContext(params: GetInterruptContext$Params, context?: HttpContext): Observable<MoryxOrdersReportContext> {
    return this.getInterruptContext$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxOrdersReportContext>): MoryxOrdersReportContext => r.body)
    );
  }

  /** Path part for operation `interruptOperation()` */
  static readonly InterruptOperationPath = '/api/moryx/orders/{guid}/interrupt';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `interruptOperation()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  interruptOperation$Response(params: InterruptOperation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return interruptOperation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `interruptOperation$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  interruptOperation(params: InterruptOperation$Params, context?: HttpContext): Observable<void> {
    return this.interruptOperation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAdviceContext()` */
  static readonly GetAdviceContextPath = '/api/moryx/orders/{guid}/advice';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAdviceContext()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAdviceContext$Response(params: GetAdviceContext$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxOrdersAdviceContext>> {
    return getAdviceContext(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAdviceContext$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAdviceContext(params: GetAdviceContext$Params, context?: HttpContext): Observable<MoryxOrdersAdviceContext> {
    return this.getAdviceContext$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxOrdersAdviceContext>): MoryxOrdersAdviceContext => r.body)
    );
  }

  /** Path part for operation `adviceOperation()` */
  static readonly AdviceOperationPath = '/api/moryx/orders/{guid}/advice';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `adviceOperation()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  adviceOperation$Response(params: AdviceOperation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return adviceOperation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `adviceOperation$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  adviceOperation(params: AdviceOperation$Params, context?: HttpContext): Observable<void> {
    return this.adviceOperation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getLogs()` */
  static readonly GetLogsPath = '/api/moryx/orders/{guid}/logs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLogs()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLogs$Response(params: GetLogs$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxOrdersEndpointsOperationLogMessageModel>>> {
    return getLogs(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLogs$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLogs(params: GetLogs$Params, context?: HttpContext): Observable<Array<MoryxOrdersEndpointsOperationLogMessageModel>> {
    return this.getLogs$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxOrdersEndpointsOperationLogMessageModel>>): Array<MoryxOrdersEndpointsOperationLogMessageModel> => r.body)
    );
  }

  /** Path part for operation `getAssignableRecipes()` */
  static readonly GetAssignableRecipesPath = '/api/moryx/orders/recipes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAssignableRecipes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAssignableRecipes$Response(params?: GetAssignableRecipes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxOrdersEndpointsOperationRecipeModel>>> {
    return getAssignableRecipes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAssignableRecipes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAssignableRecipes(params?: GetAssignableRecipes$Params, context?: HttpContext): Observable<Array<MoryxOrdersEndpointsOperationRecipeModel>> {
    return this.getAssignableRecipes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxOrdersEndpointsOperationRecipeModel>>): Array<MoryxOrdersEndpointsOperationRecipeModel> => r.body)
    );
  }

  /** Path part for operation `abortOperation()` */
  static readonly AbortOperationPath = '/api/moryx/orders/{guid}/abort';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `abortOperation()` instead.
   *
   * This method doesn't expect any request body.
   */
  abortOperation$Response(params: AbortOperation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return abortOperation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `abortOperation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  abortOperation(params: AbortOperation$Params, context?: HttpContext): Observable<void> {
    return this.abortOperation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `setOperationSortOrder()` */
  static readonly SetOperationSortOrderPath = '/api/moryx/orders/{guid}/position';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setOperationSortOrder()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  setOperationSortOrder$Response(params: SetOperationSortOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return setOperationSortOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setOperationSortOrder$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  setOperationSortOrder(params: SetOperationSortOrder$Params, context?: HttpContext): Observable<void> {
    return this.setOperationSortOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `reload()` */
  static readonly ReloadPath = '/api/moryx/orders/{guid}/reload';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `reload()` instead.
   *
   * This method doesn't expect any request body.
   */
  reload$Response(params: Reload$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return reload(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `reload$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  reload(params: Reload$Params, context?: HttpContext): Observable<void> {
    return this.reload$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
