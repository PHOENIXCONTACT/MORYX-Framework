/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createInstance } from '../fn/product-management/create-instance';
import { CreateInstance$Params } from '../fn/product-management/create-instance';
import { createRecipe } from '../fn/product-management/create-recipe';
import { CreateRecipe$Params } from '../fn/product-management/create-recipe';
import { deleteType } from '../fn/product-management/delete-type';
import { DeleteType$Params } from '../fn/product-management/delete-type';
import { duplicate } from '../fn/product-management/duplicate';
import { Duplicate$Params } from '../fn/product-management/duplicate';
import { getInstance } from '../fn/product-management/get-instance';
import { GetInstance$Params } from '../fn/product-management/get-instance';
import { getInstances } from '../fn/product-management/get-instances';
import { GetInstances$Params } from '../fn/product-management/get-instances';
import { getProductCustomization } from '../fn/product-management/get-product-customization';
import { GetProductCustomization$Params } from '../fn/product-management/get-product-customization';
import { getRecipe } from '../fn/product-management/get-recipe';
import { GetRecipe$Params } from '../fn/product-management/get-recipe';
import { getRecipes } from '../fn/product-management/get-recipes';
import { GetRecipes$Params } from '../fn/product-management/get-recipes';
import { getTypeById } from '../fn/product-management/get-type-by-id';
import { GetTypeById$Params } from '../fn/product-management/get-type-by-id';
import { getTypeByIdentity } from '../fn/product-management/get-type-by-identity';
import { GetTypeByIdentity$Params } from '../fn/product-management/get-type-by-identity';
import { getTypes } from '../fn/product-management/get-types';
import { GetTypes$Params } from '../fn/product-management/get-types';
import { import$ } from '../fn/product-management/import';
import { Import$Params } from '../fn/product-management/import';
import { ProductCustomization as MoryxAbstractionLayerProductsEndpointsProductCustomization } from '../models/Moryx/AbstractionLayer/Products/Endpoints/product-customization';
import { ProductInstanceModel as MoryxAbstractionLayerProductsEndpointsProductInstanceModel } from '../models/Moryx/AbstractionLayer/Products/Endpoints/product-instance-model';
import { ProductModel as MoryxAbstractionLayerProductsEndpointsProductModel } from '../models/Moryx/AbstractionLayer/Products/Endpoints/product-model';
import { RecipeModel as MoryxAbstractionLayerProductsEndpointsRecipeModel } from '../models/Moryx/AbstractionLayer/Products/Endpoints/recipe-model';
import { saveInstance } from '../fn/product-management/save-instance';
import { SaveInstance$Params } from '../fn/product-management/save-instance';
import { saveRecipe } from '../fn/product-management/save-recipe';
import { SaveRecipe$Params } from '../fn/product-management/save-recipe';
import { saveType } from '../fn/product-management/save-type';
import { SaveType$Params } from '../fn/product-management/save-type';
import { updateRecipe } from '../fn/product-management/update-recipe';
import { UpdateRecipe$Params } from '../fn/product-management/update-recipe';
import { updateType } from '../fn/product-management/update-type';
import { UpdateType$Params } from '../fn/product-management/update-type';

@Injectable({ providedIn: 'root' })
export class ProductManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getProductCustomization()` */
  static readonly GetProductCustomizationPath = '/api/moryx/products/configuration';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductCustomization()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductCustomization$Response(params?: GetProductCustomization$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductCustomization>> {
    return getProductCustomization(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductCustomization$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductCustomization(params?: GetProductCustomization$Params, context?: HttpContext): Observable<MoryxAbstractionLayerProductsEndpointsProductCustomization> {
    return this.getProductCustomization$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductCustomization>): MoryxAbstractionLayerProductsEndpointsProductCustomization => r.body)
    );
  }

  /** Path part for operation `import()` */
  static readonly ImportPath = '/api/moryx/products/importers/{importerName}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `import()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  import$Response(params: Import$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsProductModel>>> {
    return import$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `import$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  import(params: Import$Params, context?: HttpContext): Observable<Array<MoryxAbstractionLayerProductsEndpointsProductModel>> {
    return this.import$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsProductModel>>): Array<MoryxAbstractionLayerProductsEndpointsProductModel> => r.body)
    );
  }

  /** Path part for operation `getTypeByIdentity()` */
  static readonly GetTypeByIdentityPath = '/api/moryx/products/types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTypeByIdentity()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeByIdentity$Response(params?: GetTypeByIdentity$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsProductModel>>> {
    return getTypeByIdentity(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTypeByIdentity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeByIdentity(params?: GetTypeByIdentity$Params, context?: HttpContext): Observable<Array<MoryxAbstractionLayerProductsEndpointsProductModel>> {
    return this.getTypeByIdentity$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsProductModel>>): Array<MoryxAbstractionLayerProductsEndpointsProductModel> => r.body)
    );
  }

  /** Path part for operation `saveType()` */
  static readonly SaveTypePath = '/api/moryx/products/types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveType()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  saveType$Response(params?: SaveType$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveType$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  saveType(params?: SaveType$Params, context?: HttpContext): Observable<number> {
    return this.saveType$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getTypes()` */
  static readonly GetTypesPath = '/api/moryx/products/types/query';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTypes()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  getTypes$Response(params?: GetTypes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsProductModel>>> {
    return getTypes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTypes$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  getTypes(params?: GetTypes$Params, context?: HttpContext): Observable<Array<MoryxAbstractionLayerProductsEndpointsProductModel>> {
    return this.getTypes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsProductModel>>): Array<MoryxAbstractionLayerProductsEndpointsProductModel> => r.body)
    );
  }

  /** Path part for operation `getTypeById()` */
  static readonly GetTypeByIdPath = '/api/moryx/products/types/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTypeById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeById$Response(params: GetTypeById$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductModel>> {
    return getTypeById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTypeById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeById(params: GetTypeById$Params, context?: HttpContext): Observable<MoryxAbstractionLayerProductsEndpointsProductModel> {
    return this.getTypeById$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductModel>): MoryxAbstractionLayerProductsEndpointsProductModel => r.body)
    );
  }

  /** Path part for operation `updateType()` */
  static readonly UpdateTypePath = '/api/moryx/products/types/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateType()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateType$Response(params: UpdateType$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateType$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateType(params: UpdateType$Params, context?: HttpContext): Observable<number> {
    return this.updateType$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `duplicate()` */
  static readonly DuplicatePath = '/api/moryx/products/types/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `duplicate()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  duplicate$Response(params: Duplicate$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductModel>> {
    return duplicate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `duplicate$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  duplicate(params: Duplicate$Params, context?: HttpContext): Observable<MoryxAbstractionLayerProductsEndpointsProductModel> {
    return this.duplicate$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductModel>): MoryxAbstractionLayerProductsEndpointsProductModel => r.body)
    );
  }

  /** Path part for operation `deleteType()` */
  static readonly DeleteTypePath = '/api/moryx/products/types/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteType()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteType$Response(params: DeleteType$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteType(params: DeleteType$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteType$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getRecipes()` */
  static readonly GetRecipesPath = '/api/moryx/products/types/{id}/recipes/{classification}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecipes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecipes$Response(params: GetRecipes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsRecipeModel>>> {
    return getRecipes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecipes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecipes(params: GetRecipes$Params, context?: HttpContext): Observable<Array<MoryxAbstractionLayerProductsEndpointsRecipeModel>> {
    return this.getRecipes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsRecipeModel>>): Array<MoryxAbstractionLayerProductsEndpointsRecipeModel> => r.body)
    );
  }

  /** Path part for operation `getInstance()` */
  static readonly GetInstancePath = '/api/moryx/products/instances/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInstance()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInstance$Response(params: GetInstance$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductInstanceModel>> {
    return getInstance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInstance$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInstance(params: GetInstance$Params, context?: HttpContext): Observable<MoryxAbstractionLayerProductsEndpointsProductInstanceModel> {
    return this.getInstance$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductInstanceModel>): MoryxAbstractionLayerProductsEndpointsProductInstanceModel => r.body)
    );
  }

  /** Path part for operation `getInstances()` */
  static readonly GetInstancesPath = '/api/moryx/products/instances';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInstances()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInstances$Response(params?: GetInstances$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsProductInstanceModel>>> {
    return getInstances(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInstances$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInstances(params?: GetInstances$Params, context?: HttpContext): Observable<Array<MoryxAbstractionLayerProductsEndpointsProductInstanceModel>> {
    return this.getInstances$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsProductInstanceModel>>): Array<MoryxAbstractionLayerProductsEndpointsProductInstanceModel> => r.body)
    );
  }

  /** Path part for operation `saveInstance()` */
  static readonly SaveInstancePath = '/api/moryx/products/instances';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveInstance()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  saveInstance$Response(params?: SaveInstance$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return saveInstance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveInstance$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  saveInstance(params?: SaveInstance$Params, context?: HttpContext): Observable<void> {
    return this.saveInstance$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createInstance()` */
  static readonly CreateInstancePath = '/api/moryx/products/instances';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createInstance()` instead.
   *
   * This method doesn't expect any request body.
   */
  createInstance$Response(params?: CreateInstance$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductInstanceModel>> {
    return createInstance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createInstance$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createInstance(params?: CreateInstance$Params, context?: HttpContext): Observable<MoryxAbstractionLayerProductsEndpointsProductInstanceModel> {
    return this.createInstance$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsProductInstanceModel>): MoryxAbstractionLayerProductsEndpointsProductInstanceModel => r.body)
    );
  }

  /** Path part for operation `getRecipe()` */
  static readonly GetRecipePath = '/api/moryx/products/recipes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecipe()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecipe$Response(params: GetRecipe$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsRecipeModel>> {
    return getRecipe(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecipe$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecipe(params: GetRecipe$Params, context?: HttpContext): Observable<MoryxAbstractionLayerProductsEndpointsRecipeModel> {
    return this.getRecipe$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsRecipeModel>): MoryxAbstractionLayerProductsEndpointsRecipeModel => r.body)
    );
  }

  /** Path part for operation `updateRecipe()` */
  static readonly UpdateRecipePath = '/api/moryx/products/recipes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRecipe()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateRecipe$Response(params: UpdateRecipe$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateRecipe(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRecipe$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateRecipe(params: UpdateRecipe$Params, context?: HttpContext): Observable<number> {
    return this.updateRecipe$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `saveRecipe()` */
  static readonly SaveRecipePath = '/api/moryx/products/recipes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveRecipe()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  saveRecipe$Response(params?: SaveRecipe$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveRecipe(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveRecipe$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  saveRecipe(params?: SaveRecipe$Params, context?: HttpContext): Observable<number> {
    return this.saveRecipe$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `createRecipe()` */
  static readonly CreateRecipePath = '/api/moryx/products/recipe/construct/{recipeType}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRecipe()` instead.
   *
   * This method doesn't expect any request body.
   */
  createRecipe$Response(params: CreateRecipe$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsRecipeModel>> {
    return createRecipe(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRecipe$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createRecipe(params: CreateRecipe$Params, context?: HttpContext): Observable<MoryxAbstractionLayerProductsEndpointsRecipeModel> {
    return this.createRecipe$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsRecipeModel>): MoryxAbstractionLayerProductsEndpointsRecipeModel => r.body)
    );
  }

}
