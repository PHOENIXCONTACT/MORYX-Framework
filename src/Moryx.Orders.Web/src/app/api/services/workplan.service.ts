/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteWorkplan } from '../fn/workplan/delete-workplan';
import { DeleteWorkplan$Params } from '../fn/workplan/delete-workplan';
import { getAllWorkplans } from '../fn/workplan/get-all-workplans';
import { GetAllWorkplans$Params } from '../fn/workplan/get-all-workplans';
import { getVersions } from '../fn/workplan/get-versions';
import { GetVersions$Params } from '../fn/workplan/get-versions';
import { getWorkplan } from '../fn/workplan/get-workplan';
import { GetWorkplan$Params } from '../fn/workplan/get-workplan';
import { WorkplanModel as MoryxAbstractionLayerProductsEndpointsWorkplanModel } from '../models/Moryx/AbstractionLayer/Products/Endpoints/workplan-model';
import { saveWorkplan } from '../fn/workplan/save-workplan';
import { SaveWorkplan$Params } from '../fn/workplan/save-workplan';
import { updateWorkplan } from '../fn/workplan/update-workplan';
import { UpdateWorkplan$Params } from '../fn/workplan/update-workplan';

@Injectable({ providedIn: 'root' })
export class WorkplanService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllWorkplans()` */
  static readonly GetAllWorkplansPath = '/api/moryx/workplans';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllWorkplans()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorkplans$Response(params?: GetAllWorkplans$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsWorkplanModel>>> {
    return getAllWorkplans(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllWorkplans$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorkplans(params?: GetAllWorkplans$Params, context?: HttpContext): Observable<Array<MoryxAbstractionLayerProductsEndpointsWorkplanModel>> {
    return this.getAllWorkplans$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsWorkplanModel>>): Array<MoryxAbstractionLayerProductsEndpointsWorkplanModel> => r.body)
    );
  }

  /** Path part for operation `saveWorkplan()` */
  static readonly SaveWorkplanPath = '/api/moryx/workplans';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveWorkplan()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  saveWorkplan$Response(params?: SaveWorkplan$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return saveWorkplan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveWorkplan$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  saveWorkplan(params?: SaveWorkplan$Params, context?: HttpContext): Observable<void> {
    return this.saveWorkplan$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getVersions()` */
  static readonly GetVersionsPath = '/api/moryx/workplans/{id}/versions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getVersions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVersions$Response(params: GetVersions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsWorkplanModel>>> {
    return getVersions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getVersions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVersions(params: GetVersions$Params, context?: HttpContext): Observable<Array<MoryxAbstractionLayerProductsEndpointsWorkplanModel>> {
    return this.getVersions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxAbstractionLayerProductsEndpointsWorkplanModel>>): Array<MoryxAbstractionLayerProductsEndpointsWorkplanModel> => r.body)
    );
  }

  /** Path part for operation `getWorkplan()` */
  static readonly GetWorkplanPath = '/api/moryx/workplans/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWorkplan()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkplan$Response(params: GetWorkplan$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsWorkplanModel>> {
    return getWorkplan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWorkplan$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkplan(params: GetWorkplan$Params, context?: HttpContext): Observable<MoryxAbstractionLayerProductsEndpointsWorkplanModel> {
    return this.getWorkplan$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerProductsEndpointsWorkplanModel>): MoryxAbstractionLayerProductsEndpointsWorkplanModel => r.body)
    );
  }

  /** Path part for operation `updateWorkplan()` */
  static readonly UpdateWorkplanPath = '/api/moryx/workplans/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateWorkplan()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateWorkplan$Response(params: UpdateWorkplan$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateWorkplan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateWorkplan$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateWorkplan(params: UpdateWorkplan$Params, context?: HttpContext): Observable<void> {
    return this.updateWorkplan$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteWorkplan()` */
  static readonly DeleteWorkplanPath = '/api/moryx/workplans/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteWorkplan()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkplan$Response(params: DeleteWorkplan$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteWorkplan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteWorkplan$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkplan(params: DeleteWorkplan$Params, context?: HttpContext): Observable<void> {
    return this.deleteWorkplan$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
