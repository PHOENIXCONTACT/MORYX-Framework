/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { constructWithParameters } from '../fn/resource-modification/construct-with-parameters';
import { ConstructWithParameters$Params } from '../fn/resource-modification/construct-with-parameters';
import { getDetails } from '../fn/resource-modification/get-details';
import { GetDetails$Params } from '../fn/resource-modification/get-details';
import { getDetailsBatch } from '../fn/resource-modification/get-details-batch';
import { GetDetailsBatch$Params } from '../fn/resource-modification/get-details-batch';
import { getResources } from '../fn/resource-modification/get-resources';
import { GetResources$Params } from '../fn/resource-modification/get-resources';
import { getTypeTree } from '../fn/resource-modification/get-type-tree';
import { GetTypeTree$Params } from '../fn/resource-modification/get-type-tree';
import { invokeMethod } from '../fn/resource-modification/invoke-method';
import { InvokeMethod$Params } from '../fn/resource-modification/invoke-method';
import { ResourceModel as MoryxAbstractionLayerResourcesEndpointsResourceModel } from '../models/Moryx/AbstractionLayer/Resources/Endpoints/resource-model';
import { ResourceTypeModel as MoryxAbstractionLayerResourcesEndpointsResourceTypeModel } from '../models/Moryx/AbstractionLayer/Resources/Endpoints/resource-type-model';
import { Entry } from '@moryx/ngx-web-framework/entry-editor/src/models/entry';
import { remove } from '../fn/resource-modification/remove';
import { Remove$Params } from '../fn/resource-modification/remove';
import { save } from '../fn/resource-modification/save';
import { Save$Params } from '../fn/resource-modification/save';
import { update } from '../fn/resource-modification/update';
import { Update$Params } from '../fn/resource-modification/update';

@Injectable({ providedIn: 'root' })
export class ResourceModificationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTypeTree()` */
  static readonly GetTypeTreePath = '/api/moryx/resources/types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTypeTree()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeTree$Response(params?: GetTypeTree$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceTypeModel>> {
    return getTypeTree(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTypeTree$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTypeTree(params?: GetTypeTree$Params, context?: HttpContext): Observable<MoryxAbstractionLayerResourcesEndpointsResourceTypeModel> {
    return this.getTypeTree$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceTypeModel>): MoryxAbstractionLayerResourcesEndpointsResourceTypeModel => r.body)
    );
  }

  /** Path part for operation `getDetailsBatch()` */
  static readonly GetDetailsBatchPath = '/api/moryx/resources';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDetailsBatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDetailsBatch$Response(params?: GetDetailsBatch$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxAbstractionLayerResourcesEndpointsResourceModel>>> {
    return getDetailsBatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDetailsBatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDetailsBatch(params?: GetDetailsBatch$Params, context?: HttpContext): Observable<Array<MoryxAbstractionLayerResourcesEndpointsResourceModel>> {
    return this.getDetailsBatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxAbstractionLayerResourcesEndpointsResourceModel>>): Array<MoryxAbstractionLayerResourcesEndpointsResourceModel> => r.body)
    );
  }

  /** Path part for operation `save()` */
  static readonly SavePath = '/api/moryx/resources';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  save$Response(params?: Save$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceModel>> {
    return save(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  save(params?: Save$Params, context?: HttpContext): Observable<MoryxAbstractionLayerResourcesEndpointsResourceModel> {
    return this.save$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceModel>): MoryxAbstractionLayerResourcesEndpointsResourceModel => r.body)
    );
  }

  /** Path part for operation `getResources()` */
  static readonly GetResourcesPath = '/api/moryx/resources/query';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResources()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  getResources$Response(params?: GetResources$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MoryxAbstractionLayerResourcesEndpointsResourceModel>>> {
    return getResources(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResources$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  getResources(params?: GetResources$Params, context?: HttpContext): Observable<Array<MoryxAbstractionLayerResourcesEndpointsResourceModel>> {
    return this.getResources$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MoryxAbstractionLayerResourcesEndpointsResourceModel>>): Array<MoryxAbstractionLayerResourcesEndpointsResourceModel> => r.body)
    );
  }

  /** Path part for operation `getDetails()` */
  static readonly GetDetailsPath = '/api/moryx/resources/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDetails()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDetails$Response(params: GetDetails$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceModel>> {
    return getDetails(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDetails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDetails(params: GetDetails$Params, context?: HttpContext): Observable<MoryxAbstractionLayerResourcesEndpointsResourceModel> {
    return this.getDetails$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceModel>): MoryxAbstractionLayerResourcesEndpointsResourceModel => r.body)
    );
  }

  /** Path part for operation `update()` */
  static readonly UpdatePath = '/api/moryx/resources/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceModel>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<MoryxAbstractionLayerResourcesEndpointsResourceModel> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceModel>): MoryxAbstractionLayerResourcesEndpointsResourceModel => r.body)
    );
  }

  /** Path part for operation `remove()` */
  static readonly RemovePath = '/api/moryx/resources/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `remove()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove$Response(params: Remove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return remove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `remove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove(params: Remove$Params, context?: HttpContext): Observable<void> {
    return this.remove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `invokeMethod()` */
  static readonly InvokeMethodPath = '/api/moryx/resources/{id}/invoke/{method}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invokeMethod()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  invokeMethod$Response(params: InvokeMethod$Params, context?: HttpContext): Observable<StrictHttpResponse<Entry>> {
    return invokeMethod(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invokeMethod$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  invokeMethod(params: InvokeMethod$Params, context?: HttpContext): Observable<Entry> {
    return this.invokeMethod$Response(params, context).pipe(
      map((r: StrictHttpResponse<Entry>): Entry => r.body)
    );
  }

  /** Path part for operation `constructWithParameters()` */
  static readonly ConstructWithParametersPath = '/api/moryx/resources/types/{type}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `constructWithParameters()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  constructWithParameters$Response(params: ConstructWithParameters$Params, context?: HttpContext): Observable<StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceModel>> {
    return constructWithParameters(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `constructWithParameters$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  constructWithParameters(params: ConstructWithParameters$Params, context?: HttpContext): Observable<MoryxAbstractionLayerResourcesEndpointsResourceModel> {
    return this.constructWithParameters$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoryxAbstractionLayerResourcesEndpointsResourceModel>): MoryxAbstractionLayerResourcesEndpointsResourceModel => r.body)
    );
  }

}
