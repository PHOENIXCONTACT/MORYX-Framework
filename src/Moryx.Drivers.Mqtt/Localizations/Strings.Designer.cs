//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moryx.Drivers.Mqtt.Localizations {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Moryx.Drivers.Mqtt.Localizations.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT Broker URL or IP address.
        /// </summary>
        public static string BROOKER_URL_DESCRIPTION {
            get {
                return ResourceManager.GetString("BROOKER_URL_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status of the MQTT driver.
        /// </summary>
        public static string DRIVER_STATE {
            get {
                return ResourceManager.GetString("DRIVER_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message format.
        /// </summary>
        public static string FORMAT {
            get {
                return ResourceManager.GetString("FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Host address of the broker.
        /// </summary>
        public static string HOST_ADDRESS {
            get {
                return ResourceManager.GetString("HOST_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT Topic Identifier.
        /// </summary>
        public static string IDENTIFIER {
            get {
                return ResourceManager.GetString("IDENTIFIER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier for MQTT topic, avoiding spaces and following MQTT best practices.
        /// </summary>
        public static string IDENTIFIER_DESCRIPTION {
            get {
                return ResourceManager.GetString("IDENTIFIER_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of message to be sent.
        /// </summary>
        public static string MESSAGE_NAME {
            get {
                return ResourceManager.GetString("MESSAGE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT Broker.
        /// </summary>
        public static string MQTT_DRIVER {
            get {
                return ResourceManager.GetString("MQTT_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A driver for connecting to MQTT resources.
        /// </summary>
        public static string MQTT_DRIVER_DESCRIPTION {
            get {
                return ResourceManager.GetString("MQTT_DRIVER_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT Broker for IByteSerializable messages.
        /// </summary>
        public static string MQTT_TOPIC_BYTE {
            get {
                return ResourceManager.GetString("MQTT_TOPIC_BYTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT topic for messages implementing IByteSerializable.
        /// </summary>
        public static string MQTT_TOPIC_BYTE_DESCRIPTION {
            get {
                return ResourceManager.GetString("MQTT_TOPIC_BYTE_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT Topic for JSON messages.
        /// </summary>
        public static string MQTT_TOPIC_JSON {
            get {
                return ResourceManager.GetString("MQTT_TOPIC_JSON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT Topic where messages are in JSON format.
        /// </summary>
        public static string MQTT_TOPIC_JSON_DESCRIPTION {
            get {
                return ResourceManager.GetString("MQTT_TOPIC_JSON_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT Topic for primitive types.
        /// </summary>
        public static string MQTT_TOPIC_PRIMITIVE {
            get {
                return ResourceManager.GetString("MQTT_TOPIC_PRIMITIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT Topic where primitive data types are published.
        /// </summary>
        public static string MQTT_TOPIC_PRIMITIVE_DESCRIPTION {
            get {
                return ResourceManager.GetString("MQTT_TOPIC_PRIMITIVE_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MQTT version.
        /// </summary>
        public static string MQTT_VERSION {
            get {
                return ResourceManager.GetString("MQTT_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the MQTT version number. Default is 3.1.0 if unknown..
        /// </summary>
        public static string MQTT_VERSION_DESCRIPTION {
            get {
                return ResourceManager.GetString("MQTT_VERSION_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client password.
        /// </summary>
        public static string PASSWORD {
            get {
                return ResourceManager.GetString("PASSWORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password for authenticating with the MQTT broker.
        /// </summary>
        public static string PASSWORD_DESCRIPTION {
            get {
                return ResourceManager.GetString("PASSWORD_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default port is 1883 for MQTT unless specified otherwise..
        /// </summary>
        public static string PORT_DESCRIPTION {
            get {
                return ResourceManager.GetString("PORT_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set MQTT quality of service level.
        /// </summary>
        public static string QUALITY_OF_SERVICE {
            get {
                return ResourceManager.GetString("QUALITY_OF_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the QoS level for message delivery.
        /// </summary>
        public static string QUALITY_OF_SERVICE_DESCRIPTION {
            get {
                return ResourceManager.GetString("QUALITY_OF_SERVICE_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reconnect using a clean session.
        /// </summary>
        public static string RECONNECT_CLEAN_SESSION {
            get {
                return ResourceManager.GetString("RECONNECT_CLEAN_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure if the connection should be reestablished with a clean session..
        /// </summary>
        public static string RECONNECT_CLEAN_SESSION_DESCRIPTION {
            get {
                return ResourceManager.GetString("RECONNECT_CLEAN_SESSION_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delay between reconnection attempts.
        /// </summary>
        public static string RECONNECT_DELAY_MS {
            get {
                return ResourceManager.GetString("RECONNECT_DELAY_MS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify a delay in milliseconds before trying to reconnect after an error..
        /// </summary>
        public static string RECONNECT_DELAY_MS_DESCRIPTION {
            get {
                return ResourceManager.GetString("RECONNECT_DELAY_MS_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Topic for responses.
        /// </summary>
        public static string RESPONSE_TOPIC {
            get {
                return ResourceManager.GetString("RESPONSE_TOPIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Topic to which other clients can respond.
        /// </summary>
        public static string RESPONSE_TOPIC_DESCRIPTION {
            get {
                return ResourceManager.GetString("RESPONSE_TOPIC_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Root MQTT topic.
        /// </summary>
        public static string ROOT_TOPIC {
            get {
                return ResourceManager.GetString("ROOT_TOPIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the MQTT topic.
        /// </summary>
        public static string TOPIC_NAME {
            get {
                return ResourceManager.GetString("TOPIC_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use TLS.
        /// </summary>
        public static string USE_TLS {
            get {
                return ResourceManager.GetString("USE_TLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check to enable a TLS secured connection.
        /// </summary>
        public static string USE_TLS_DESCRIPTION {
            get {
                return ResourceManager.GetString("USE_TLS_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client username.
        /// </summary>
        public static string USERNAME {
            get {
                return ResourceManager.GetString("USERNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Username for authenticating with the MQTT broker.
        /// </summary>
        public static string USERNAME_DESCRIPTION {
            get {
                return ResourceManager.GetString("USERNAME_DESCRIPTION", resourceCulture);
            }
        }
    }
}
